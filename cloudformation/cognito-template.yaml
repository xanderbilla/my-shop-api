AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Cognito User Pool and App Client for Spring Microservice Auth'

Parameters:
  ProjectName:
    Type: String
    Default: 'spring-microservice'
    Description: 'Name of the project'
  
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${ProjectName}-${Environment}-user-pool'
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          TemporaryPasswordValidityDays: 7
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: role
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: username
          AttributeDataType: String
          Required: false
          Mutable: true
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: false
        DeviceOnlyRememberedOnUserPrompt: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      MfaConfiguration: 'OFF'
      UserPoolTags:
        Project: !Ref ProjectName
        Environment: !Ref Environment

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${ProjectName}-${Environment}-app-client'
      UserPoolId: !Ref UserPool
      GenerateSecret: true
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      ReadAttributes:
        - email
        - name
        - custom:role
        - custom:username
      WriteAttributes:
        - email
        - name
        - custom:role
        - custom:username
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 24
      IdTokenValidity: 24
      RefreshTokenValidity: 30
      EnableTokenRevocation: true

Outputs:
  UserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !Ref UserPool
    Export:
      Name: !Sub '${ProjectName}-${Environment}-UserPoolId'
  
  UserPoolClientId:
    Description: 'Cognito User Pool Client ID'
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${ProjectName}-${Environment}-UserPoolClientId'
  
  UserPoolArn:
    Description: 'Cognito User Pool ARN'
    Value: !GetAtt UserPool.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-UserPoolArn'
  
  Region:
    Description: 'AWS Region'
    Value: !Ref AWS::Region
    Export:
      Name: !Sub '${ProjectName}-${Environment}-Region'
  
  # Environment variables for the application
  EnvironmentVariables:
    Description: 'Environment variables to set for the application'
    Value: !Sub |
      export AWS_COGNITO_REGION=${AWS::Region}
      export AWS_COGNITO_USER_POOL_ID=${UserPool}
      export AWS_COGNITO_CLIENT_ID=${UserPoolClient}
      # Note: Client Secret must be retrieved separately using AWS CLI
      # aws cognito-idp describe-user-pool-client --user-pool-id ${UserPool} --client-id ${UserPoolClient} --query 'UserPoolClient.ClientSecret' --output text